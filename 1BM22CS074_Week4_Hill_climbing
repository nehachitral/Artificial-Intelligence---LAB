from random import randint

# Take input for the size of the board
N = int(input("Enter the size of the board (N): "))

def configureFromInput(board, state):
    print("Enter the initial positions of the queens (0 to N-1 for each column):")
    for i in range(N):
        while True:
            try:
                position = int(input(f"Position for queen in column {i} (row 0 to {N-1}): "))
                if 0 <= position < N:
                    state[i] = position
                    board[position][i] = 1
                    break
                else:
                    print("Invalid position. Please enter a value between 0 and", N-1)
            except ValueError:
                print("Invalid input. Please enter a number.")

def printBoard(board):
    for row in board:
        print(' '.join(str(x) for x in row))

def compareStates(state1, state2):
    return state1 == state2

def fill(board, value):
    for i in range(N):
        for j in range(N):
            board[i][j] = value

def calculateObjective(board, state):
    attacking = 0
    for i in range(N):
        row = state[i]
        for j in range(N):
            if j != i:  # Check other columns
                if board[row][j] == 1:  # Same row
                    attacking += 1
                # Check diagonals
                if row + j - i >= 0 and row + j - i < N and board[row + j - i][j] == 1:
                    attacking += 1
                if row - j + i >= 0 and row - j + i < N and board[row - j + i][j] == 1:
                    attacking += 1
    return attacking // 2

def generateBoard(board, state):
    fill(board, 0)
    for i in range(N):
        board[state[i]][i] = 1

def getNeighbour(board, state):
    opBoard = [[0] * N for _ in range(N)]
    opState = state.copy()
    generateBoard(opBoard, opState)
    opObjective = calculateObjective(opBoard, opState)

    NeighbourBoard = [[0] * N for _ in range(N)]
    NeighbourState = state.copy()
    generateBoard(NeighbourBoard, NeighbourState)

    for i in range(N):
        original_row = NeighbourState[i]
        for j in range(N):
            if j != original_row:  # Avoid the same row
                NeighbourState[i] = j
                NeighbourBoard[j][i] = 1
                NeighbourBoard[original_row][i] = 0

                temp = calculateObjective(NeighbourBoard, NeighbourState)

                if temp < opObjective:  # Found a better state
                    opObjective = temp
                    opState = NeighbourState.copy()

                # Reset back
                NeighbourBoard[j][i] = 0
                NeighbourState[i] = original_row
                NeighbourBoard[original_row][i] = 1

    return opState

def hillClimbing(board, state):
    step = 0
    while True:
        currentObjective = calculateObjective(board, state)
        newState = getNeighbour(board, state)

        if compareStates(state, newState):
            break

        state = newState
        generateBoard(board, state)

        step += 1
        print(f"Step {step}: Current State: {state} | Objective: {currentObjective}")
        printBoard(board)
        print()  # Blank line for readability

# Initialize state and board
state = [0] * N
board = [[0] * N for _ in range(N)]
configureFromInput(board, state)
hillClimbing(board, state)

print("Final board configuration:")
printBoard(board)
