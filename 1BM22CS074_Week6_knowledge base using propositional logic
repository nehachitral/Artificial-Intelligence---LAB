combinations = [
    (True, True, True),
    (True, True, False),
    (True, False, True),
    (True, False, False),
    (False, True, True),
    (False, True, False),
    (False, False, True),
    (False, False, False)
]

variable = {'p': 0, 'q': 1, 'r': 2}
kb = ''
q = ''
priority = {'~': 3, 'v': 1, '^': 2}

def input_rules():
    global kb, q
    kb = input("Enter rule: ")  # Knowledge Base (KB)
    q = input("Enter the Query: ")  # Query

def entailment():
    global kb, q
    print('*' * 10 + "Truth Table Reference" + '*' * 10)
    print('kb', 'alpha')
    print('*' * 10)
    
    for comb in combinations:
        s = evaluatePostfix(toPostfix(kb), comb)  # Evaluate KB
        f = evaluatePostfix(toPostfix(q), comb)   # Evaluate Query
        print(s, f)
        print('-' * 10)
        
        if s and not f:  # If KB is True and query is False, KB does not entail query
            return False
    return True

def isOperand(c):
    return c.isalpha() and c != 'v'

def isLeftParanthesis(c):
    return c == '('

def isRightParanthesis(c):
    return c == ')'

def isEmpty(stack):
    return len(stack) == 0

def peek(stack):
    return stack[-1]

def hasLessOrEqualPriority(c1, c2):
    try:
        return priority[c1] <= priority[c2]
    except KeyError:
        return False

def toPostfix(infix):
    stack = []
    postfix = ''
    
    for c in infix:
        if isOperand(c):
            postfix += c
        else:
            if isLeftParanthesis(c):
                stack.append(c)
            elif isRightParanthesis(c):
                operator = stack.pop()
                while not isLeftParanthesis(operator):
                    postfix += operator
                    operator = stack.pop()
            else:
                while (not isEmpty(stack)) and hasLessOrEqualPriority(c, peek(stack)):
                    postfix += stack.pop()
                stack.append(c)
                
    while (not isEmpty(stack)):
        postfix += stack.pop()
        
    return postfix

def evaluatePostfix(exp, comb):
    stack = []
    for i in exp:
        if isOperand(i):
            stack.append(comb[variable[i]])  # Push the truth value from the combination
        elif i == '~':
            val1 = stack.pop()
            stack.append(not val1)  # Negation
        else:
            val1 = stack.pop()
            val2 = stack.pop()
            stack.append(_eval(i, val2, val1))  # Evaluate AND or OR
            
    return stack.pop()

def _eval(i, val1, val2):
    if i == '^':
        return val2 and val1  # AND
    return val2 or val1  # OR

# Main Program
input_rules()
ans = entailment()

if ans:
    print("The Knowledge Base entails the query")
else:
    print("The Knowledge Base does not entail the query")


